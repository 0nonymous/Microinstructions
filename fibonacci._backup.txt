; print fibonacci sequence
; addresses: fef3 ddra, fef2 ddrb
; addresses: fef1 ra, fef0 rb

; internal computer initialization
; set ports to output
  lda $ff
  sta @fef2
  sta @fef3

; lcd initialization
; initalize
  lda $38
  sta @fef1
  lda $02
  sta @fef0
  lda $00
  sta @fef0

; set parameters
  lda $0f
  sta @fef1
  lda $02
  sta @fef0
  lda $00
  sta @fef0

; increment lcd
  lda $06 ;26
  sta @fef1
  lda $02
  sta @fef0
  lda $00
  sta @fef0

; program initialization
; create iterator
  ldx $00
  stx @0800  

; create variable one - 0 is already in x register
  stx @0801

; create variable two
  ldx $01
  stx @0802

; main loop
loopp:
; put variable one onto the stack to pass as an arguement for the print function
  lda @0801
; also add 0x30 for proper character
  add $30
  pha  
  jsr @print
  pla  

; put the ascii for comma onto the stack for the print function
  lda $2c
  pha  
  jsr @print
  pla  

; add the numbers for the fibonacci sequence
  lda @0801
  add @0802

; shift the fibonacci sequence
  ldx @0802
  stx @0801

; store the next value from a register into fibonacci
  sta @0802

; increment the iterator for the for loop
  ldx @0800
  inx  
  stx @0800
  txa  
  sub $07
  beq @donne
  bne @loopp

donne:
  jmp @donne

; character printing subroutine
print:
  ldx $03
  xla  
  sta @fef1
  lda $03
  sta @fef0
  lda $00
  sta @fef0
  rsr  

; compiler finish directive
  end  